#!/usr/bin/env bash

# WiFi network selection menu using iwctl and fzf
# Requires: iwctl, fzf, and appropriate permissions for network management

set -euo pipefail

# Configuration
DEVICE="${WIFI_DEVICE:-wlan0}"
TIMEOUT=30

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1" >&2
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1" >&2
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" >&2
}

# Check if device exists and is available
check_device() {
    if ! iwctl device list | grep -q "$DEVICE"; then
        error "WiFi device '$DEVICE' not found"
        log "Available devices:"
        iwctl device list
        exit 1
    fi
}

# Ensure WiFi is powered on
power_on_wifi() {
    local powered
    powered=$(iwctl device show "$DEVICE" | grep "Powered" | awk '{print $2}')

    if [[ "$powered" == "off" ]]; then
        log "Powering on WiFi device $DEVICE..."
        iwctl device "$DEVICE" set-property Powered on
        sleep 2
    fi
}

# Scan for networks
scan_networks() {
    log "Scanning for WiFi networks..."
    iwctl station "$DEVICE" scan
    sleep 3
}

# Get list of available networks
get_networks() {
    iwctl station "$DEVICE" get-networks | \
        tail -n +5 | \
        grep -v "^$" | \
        awk '{
            # Handle networks with spaces in name
            security = $(NF-1) " " $NF
            # Remove security info from end
            $NF = ""
            $(NF-1) = ""
            # Remove signal strength (4th field)
            $4 = ""
            # Get network name (everything else)
            gsub(/^ +| +$/, "")
            name = $0
            gsub(/ +/, " ", name)
            if (name != "") print name " [" security "]"
        }' | \
        sort -u
}

# Extract network name from menu selection
extract_network_name() {
    echo "$1" | sed 's/ \[.*\]$//'
}

# Check if network is open (no password required)
is_open_network() {
    echo "$1" | grep -q "\[open\]"
}

# Get password for secured networks
get_password() {
    local network="$1"
    local password

    password=$(echo "" | $MENU_CMD --prompt "Password for '$network'" --password)
    echo "$password"
}

# Connect to network
connect_to_network() {
    local network="$1"
    local password="$2"

    log "Connecting to '$network'..."

    if [[ -n "$password" ]]; then
        # Network with password
        echo "$password" | iwctl station "$DEVICE" connect "$network" --passphrase-from-stdin
    else
        # Open network
        iwctl station "$DEVICE" connect "$network"
    fi
}

# Wait for connection with timeout
wait_for_connection() {
    local network="$1"
    local count=0

    log "Waiting for connection (timeout: ${TIMEOUT}s)..."

    while [[ $count -lt $TIMEOUT ]]; do
        if iwctl station "$DEVICE" show | grep -q "Connected network.*$network"; then
            success "Successfully connected to '$network'"
            return 0
        fi

        sleep 1
        ((count++))

        # Show progress every 5 seconds
        if [[ $((count % 5)) -eq 0 ]]; then
            log "Still connecting... (${count}/${TIMEOUT}s)"
        fi
    done

    error "Connection timeout after ${TIMEOUT} seconds"
    return 1
}

# Show current connection status
show_status() {
    log "Current WiFi status:"
    iwctl station "$DEVICE" show | grep -E "(State|Connected network)"
}

# Disconnect from current network
disconnect_current() {
    log "Disconnecting from current network..."
    iwctl station "$DEVICE" disconnect
    success "Disconnected"
}

# Main menu function
main_menu() {
    local networks
    local selected
    local network_name
    local password=""

    # Get available networks
    networks=$(get_networks)

    if [[ -z "$networks" ]]; then
        error "No WiFi networks found"
        exit 1
    fi

    # Add special options
    local menu_items
    menu_items="ðŸ“¶ Refresh Networks
ðŸ”Œ Disconnect
ðŸ“Š Show Status
---
$networks"

    # Show menu
    selected=$(echo "$menu_items" | $MENU_CMD)

    if [[ -z "$selected" ]]; then
        log "No selection made"
        exit 0
    fi

    # Handle special options
    case "$selected" in
        "ðŸ“¶ Refresh Networks")
            scan_networks
            main_menu
            return
            ;;
        "ðŸ”Œ Disconnect")
            disconnect_current
            return
            ;;
        "ðŸ“Š Show Status")
            show_status
            return
            ;;
        "---")
            main_menu
            return
            ;;
    esac

    # Extract network name from selection
    network_name=$(extract_network_name "$selected")

    if [[ -z "$network_name" ]]; then
        error "Invalid network selection"
        exit 1
    fi

    log "Selected network: '$network_name'"

    # Check if network requires password
    if ! is_open_network "$selected"; then
        password=$(get_password "$network_name")
        if [[ -z "$password" ]]; then
            warning "No password entered, attempting connection anyway..."
        fi
    fi

    # Attempt connection
    if connect_to_network "$network_name" "$password"; then
        wait_for_connection "$network_name"
    else
        error "Failed to connect to '$network_name'"
        exit 1
    fi
}

# Main execution
main() {
    log "WiFi Menu - Device: $DEVICE"

    check_device
    power_on_wifi
    scan_networks
    main_menu
}

# Handle script arguments
case "${1:-}" in
    --help|-h)
        cat << EOF
WiFi Network Selection Menu

Usage: $0 [options]

Options:
    --help, -h          Show this help message
    --device DEVICE     Specify WiFi device (default: wlan0)
    --scan             Only scan for networks
    --status           Show current connection status
    --disconnect       Disconnect from current network

Environment Variables:
    WIFI_DEVICE        WiFi device to use (default: wlan0)
    MENU_CMD          Menu command to use (default: wofi --dmenu)

Examples:
    $0                          # Show network selection menu
    $0 --device wlp3s0         # Use specific device
    $0 --scan                  # Just scan for networks
    MENU_CMD="dmenu -i" $0     # Use dmenu instead of wofi
EOF
        exit 0
        ;;
    --device)
        DEVICE="$2"
        shift 2
        ;;
    --scan)
        check_device
        power_on_wifi
        scan_networks
        get_networks
        exit 0
        ;;
    --status)
        check_device
        show_status
        exit 0
        ;;
    --disconnect)
        check_device
        disconnect_current
        exit 0
        ;;
    "")
        # No arguments - run main menu
        main
        ;;
    *)
        error "Unknown argument: $1"
        echo "Use --help for usage information"
        exit 1
        ;;
esac
